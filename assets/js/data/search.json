[ { "title": "Configure a personal domain name on github.", "url": "/posts/custom-domain-gh/", "categories": "web site", "tags": "blog, git-hub, domain, custom, DNS, host", "date": "2022-06-21 17:00:00 +0200", "snippet": "Git hub allows us to host a public project online and to have access with a github.io URL. It is possible not to use the domain name github.io and instead have a personal domain name.For this you just need to have a domain name and that’s it.Domain nameTo have your own domain name you need to buy one from a hosting company like OVH, Go Daddy or ionos or any other hosting company.The acquisition of a domain name is not very expensive. You can even find free domain names if you are not too picky on the extension.I have domain names with OVH and Ionos which are two hosting companies that I can recommend but really all hosting companies are the same if it’s just for the purchase of a domain name.GitHub hebergemetWith Git-hub you have two choices of hosting either repo in which case the project URL would look like this &lt;gh username.github.io/&lt;repo name&gt;. or a single record that would be linked to your username.In both cases you need a subdomain for each hosted page.DNS registrationI have the domain name jeyakrishnan.fr at OVH so it is with their interface that I show you the process but it should be almost the same for all the hosters just different visual.You can configure a subdomain to point directly to a URL Gitgub but it is strongly advised to configure the subdomain to the url of your project.There are several types of records in the DNS zone but since we are going to redirect to another URL it is wise to use the CNAME fieldhere I create the subdomain hari.jeyakrishnan.fr for my documentation project. Subdomain for the projectIt is also a good idea to create a subdomain WWW otherwise when users search for www.&lt;sub.domain.ext&gt; the search may not be successful. I recommend you to point the WWW to your subdomain so when you want to change the destination of the subdomain you only have to do the moifiacation once.World Wide Web sub domain for our subdomain._ Changes in the DNS zone can take up to 48 hours to propagate around the world.github configurationNow that we have our DNS record waiting to propagate everywhere we can finish the configuration on Github.configuration of the URL on github.once you have configured github, you can go to the domain name you want to configure and it’s done." }, { "title": "Build a blog with Jekyll and Chirpy.", "url": "/posts/build-blog-with-chirpy/", "categories": "web site", "tags": "chirpy, jekyll, blog, softwere", "date": "2022-06-14 20:00:00 +0200", "snippet": "IntroductionIn this first post I will explain how I did to easily create and publish a blog.I will use this as a documentation blog, but of course you can use the same technique for any kind of blog.First we will use jerkyll which is an opensource static site generator.It allows us to write the posts in markdown and it takes care of converting them into HTML and CSS.Starting a whole project with jekyll can be a bit challenging for beginners (like me), so you can download themes for jekyll.In my case I use the chirpy theme (simple and efficient) but there are themes for every taste, you have some examples here but if you don’t like anything you can always create your own theme from scratch.that’s about all you need to know to get started.let’s get startedDependenciesIn my case my OS is Ubuntu, so this documentation should work for any Debian based OS but if you use another OS you should refer to the specific documentation of your OSwe need some dependencies to get started first : Ruby version 2.5.0 ou Higher jekyll bundlerRubySince jekyll is written with ruby we need to install Ruby.sudo apt install ruby-full build-essential zlib1g-dev gitAvoid installing RubyGems packages (called gems) as the root user. Instead, set up a gem installation directory for your user account. The following commands will add environment variables to your ~/.bashrc file to configure the gem installation path:echo '# Install Ruby Gems to ~/gems' &gt;&gt; ~/.bashrcecho 'export GEM_HOME=\"$HOME/gems\"' &gt;&gt; ~/.bashrcecho 'export PATH=\"$HOME/gems/bin:$PATH\"' &gt;&gt; ~/.bashrcsource ~/.bashrcJekyll bundlerBundler provides a consistent environment for Ruby projects by tracking and installing the exact gems and versions that are needed.gem install jekyll bundleruse the Chirpy themeBy going to the git hub repo of chripy in the quick start session there is an option to create a new repo from the original.We need to copy it so we have our own github repo and we can make the necessary changes and keep a copy of our code on github as a back up.Copy the original repo screenshot of the new repo creation on githubOnce we have our repo, we have to clone it on our pcgit clone https://github.com/&lt;git username&gt;/&lt;git repo name&gt;.gityou can find your link here :(my repo is called docx) The repo link on gitNow we have cloned the repo we need to install dependencies for the repo :cd path/to/cloned/repobundleChange the themeWith jekyll especially Chirpy it is easy to make changes to the blog.for the general configuration it is enough to go to the file _config.yml and to make the modificationsit is a good starting point to modify the following fieldslang: &lt;option&gt; timezone: &lt;option&gt;title: &lt;option&gt;tagline: &lt;option&gt;description: &lt;option&gt;It is possible to customize evry single option but that’s not really the point here.There is plenty of documentation online to fine tune the site.PostsAs seen before the posts are written in markdown and Jekyll does the layout for us.Naming ConventionsTo to write an article you just have to create a file in the _posts folder, but the file name must respect some rules. It is necessary to have the date at the beginning in YYYY-MM-DD format You can schedule the publication date by setting the date and time in the furure. It is necessary to write in kebab-case It must have an extension in .mdso for this position the file name is this: 2022-06-14-build-blog-with-chirpy.md if you are not familiar with markdown it is very easy, the markdown code of this article is here.Headerbefore writing your article, be sure to read this header, otherwise the layout may be at best haphazard---title: &lt;title of the article&gt;date: AAA-MM-DD HH:MMcategories: [cat 1, cat 2] #you can only have two categoriestags: [tag 1, tag 2, tag 3, tag 4] # TAG names should always be lowercaseimg_path: /path/to/image/folder---Markdown ExamplesIf you need some help with markdown, check out the markdown cheat sheetI have lots of examples in my documentation site repo. Just click on the Raw button to see the code behind the page.For more neat syntax for the Chirpy theme check their demo page on making postsJekyll CommandsIt is possible to have an overview of the changes you have made before putting the site into production.cd path/to/cloned/repobundle exec jekyll sthe output should look something like this:Configuration file: /home/hari/Documents/site/dev/docx/_config.yml Theme Config file: /var/lib/gems/3.0.0/gems/jekyll-theme-chirpy-5.2.0/_config.yml Source: /home/hari/Documents/site/dev/docx Destination: /home/hari/Documents/site/dev/docx/_site Incremental build: disabled. Enable with --incremental Generating... done in 0.317 seconds. Auto-regeneration: enabled for '/home/hari/Documents/site/dev/docx' Server address: http://127.0.0.1:4000/ Server running... press ctrl-c to stop.Now we can go to http://127.0.0.1:4000/ to have an overview of our blog. it is good to note that if you make changes to the _config.yml you must restart the processNow that you are satisfied with the result you can build the site in production mode.cd path/to/cloned/repoJEKYLL_ENV=production bundle exec jekyll bOutputConfiguration file: /home/hari/Documents/site/dev/docx/_config.yml Theme Config file: /var/lib/gems/3.0.0/gems/jekyll-theme-chirpy-5.2.0/_config.yml Source: /home/hari/Documents/site/dev/docx Destination: /home/hari/Documents/site/dev/docx/_site Incremental build: disabled. Enable with --incremental Generating... done in 0.407 seconds. Auto-regeneration: disabled. Use --watch to enable.Jekyll has now built the site in the _site folder. Just copy the content of this folder and copy it to the appropriate folder on our web server so that the blog is online.And Voila, you have your blog.HostingThe next step is to host the site either on github or locally, personally I will host it locally and on github for free as a backup so if locally the site is down the visitors will be directed on Github.Since hosting on github is the easiest thing to do we will do it right away. The author has already done almost everything for us in the .github folder we can see that there is a pages-deploy.yml file this configuration file configures an ubuntu, installs the dependencies and ‘compiles’ our site in puroduction mode and all this in a totally automatic way. We just need to make a push on github and the magic happens. But before the magic happens we need to do some initial actions.URLFirst we have to change the name of the project to something like &lt;GHusername&gt;.gihub.ioIf you want to have a direct URL you have to change the name of your repo. You have to go to settings &gt; General &gt; Repository name and change the name to look like this: &lt;GHusername&gt;.gihub.io remember to click on the ‘Rename’ button. change the name of the repoPublishing branchSecondly we need to choose the source of the site, to choose this we go to settings &gt; pages &gt; Source and in the branches make sure you choose gh-pages you can save and everything is good. choose the publication branch Here you will also have the Github URL of your blog.that’s all we have to do now the secript will do everything for us.Here you will also have the Github URL of your blog.git commandsNow you just have to sync the local changes with github. You can do a JEKYLL_ENV=production bundle exec jekyll b before doing the push so the production version of our blog will also be backed up on github.git add .git commit -m '&lt;a comment that describes this commit&gt;'git pushOnce the push command is placed you will see in the action tab, Github-actions bot build your page. once it is finished, you will see the blog online.Et voilà your blog is online." } ]
